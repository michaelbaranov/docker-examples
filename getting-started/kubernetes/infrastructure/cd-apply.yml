# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
    - getting-started/kubernetes/infrastructure

variables:
- group: docker-examples-variables

stages: 
- stage: RunDeployment
  jobs:
    - job: PlanAndApply
      steps:
        - task: AzureCLI@2
          displayName: Obtain credentials
          inputs:
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptType: 'pscore'
            scriptLocation: inlineScript
            inlineScript: |
              set -eu  # fail on error
              subscriptionId=$(az account show --query id -o tsv)
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
            addSpnToEnvironment: true
        - task: AzureCLI@2
          displayName: Terraform init
          inputs:
            scriptType: 'pscore'
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform init `
                -backend-config=storage_account_name=$env:StateStorageAccount `
                -backend-config=container_name=$env:StateContainerName `
                -backend-config=key=$env:StateFileName `
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: AzureCLI@2
          displayName: Terraform validate
          inputs:
            scriptType: pscore
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform validate
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: AzureCLI@2
          displayName: Terraform plan
          inputs:
            scriptType: pscore
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform plan -out=tfplan `
                -var deployment_prefix=$env:DeploymentPrefix `
                -var location=$env:Location `
                -var acrname=$env:ACRName `
                -var sql-server-name=$env:SQLServerName `
                -var sql_admin_password=$env:SQLSAPassword `
                -var aks-name=$env:AKSName `
                -var resourceGroupName=$env:ResourceGroupName `
                -var elasticPoolName=$env:ElasticPoolName
            addSpnToEnvironment: true
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: AzureCLI@2
          displayName: Terraform apply
          inputs:
            scriptType: pscore
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform apply -auto-approve tfplan
            addSpnToEnvironment: true
            workingDirectory: 'getting-started/kubernetes/infrastructure'
- stage: ConfigureEnvironment
  jobs:
    - job: Installnginx
      steps:
      - task: AzureCLI@2
        displayName: "Install nginx"
        inputs:
          azureSubscription: 'DockerExamplesAzureConnection'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --name $env:AKSNAME --resource-group $env:RESOURCEGROUPNAME
            $releases = helm list --filter nginx-ingress -o json | ConvertFrom-Json
            if ($releases.Length -eq 0){
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.replicaCount=2 --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux --set-string controller.config.proxy-body-size=10m
            }
pool:
  vmImage: ubuntu-latest