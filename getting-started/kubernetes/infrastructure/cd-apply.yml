# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
    - getting-started/kubernetes/infrastructure

variables:
- group: docker-examples-variables

stages: 
- stage: RunDeployment
  jobs:
    - job: PlanAndApply
      steps:
        - task: AzureCLI@1
          displayName: Obtain credentials
          inputs:
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              set -eu  # fail on error
              subscriptionId=$(az account show --query id -o tsv)
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
            addSpnToEnvironment: true
        - task: AzureCLI@1
          displayName: Terraform init
          inputs:
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              set -eux  # fail on error
              subscriptionId=$(az account show --query id -o tsv)
              terraform init \
                -backend-config=storage_account_name=$(StateStorageAccount) \
                -backend-config=container_name=$(StateContainerName) \
                -backend-config=key=$(StateFileName) \
                -backend-config=resource_group_name=$(StateResourceGroupName) \
                -backend-config=subscription_id="$(ARM_SUBSCRIPTION_ID)" \
                -backend-config=tenant_id="$(ARM_TENANT_ID)" \
                -backend-config=client_id="$(ARM_CLIENT_ID)" \
                -backend-config=client_secret="$(ARM_CLIENT_SECRET)"    
            addSpnToEnvironment: true
#         - task: TerraformTaskV1@0
#           displayName: Terraform Init
#           inputs:
#             provider: 'azurerm'
#             command: 'init'
#             workingDirectory: 'getting-started/kubernetes/infrastructure'
#             backendServiceArm: 'DockerExamplesAzureConnection'
#             backendAzureRmResourceGroupName: '$(StateResourceGroupName)'
#             backendAzureRmStorageAccountName: '$(StateStorageAccount)'
#             backendAzureRmContainerName: '$(StateContainerName)'
#             backendAzureRmKey: '$(StateFileName)'
#         - task: TerraformTaskV1@0
#           displayName: 'Validate template'
#           inputs:
#             provider: 'azurerm'
#             command: 'validate'
#             workingDirectory: 'getting-started/kubernetes/infrastructure'
#         - task: TerraformTaskV1@0
#           displayName: 'Build plan'
#           inputs:
#             provider: 'azurerm'
#             command: 'plan'
#             workingDirectory: 'getting-started/kubernetes/infrastructure'
#             commandOptions: '-out=tfplan -var deployment_prefix=$(DeploymentPrefix) -var location=$(Location) -var acrname=$(ACRName) -var sql-server-name=$(SQLServerName) -var sql_admin_password=$(SQLSAPassword) -var aks-name=$(AKSName) -var resourceGroupName=$(ResourceGroupName) -var elasticPoolName=$(ElasticPoolName)'
#             environmentServiceNameAzureRM: 'DockerExamplesAzureConnection'
#         - task: TerraformTaskV1@0
#           displayName: 'Apply infrastructure changes'
#           inputs:
#             provider: 'azurerm'
#             command: 'apply'
#             workingDirectory: 'getting-started/kubernetes/infrastructure'
#             commandOptions: '-auto-approve tfplan'
#             environmentServiceNameAzureRM: 'DockerExamplesAzureConnection'
# - stage: ConfigureEnvironment
#   jobs:
#     - job: Installnginx
#       steps:
#       - task: AzureCLI@2
#         displayName: "Install nginx"
#         inputs:
#           azureSubscription: 'DockerExamplesAzureConnection'
#           scriptType: 'pscore'
#           scriptLocation: 'inlineScript'
#           inlineScript: |
#             az aks get-credentials --name $env:AKSNAME --resource-group $env:RESOURCEGROUPNAME
#             $releases = helm list --filter nginx-ingress -o json | ConvertFrom-Json
#             if ($releases.Length -eq 0){
#               helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#               helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.replicaCount=2 --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux --set-string controller.config.proxy-body-size=10m
#             }
pool:
  vmImage: ubuntu-latest