# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
    - getting-started/kubernetes/infrastructure

variables:
- group: docker-examples-variables

stages: 
- stage: RunDeployment
  jobs:
    - job: PlanAndApply
      steps:
        - task: TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
            backendServiceArm: 'DockerExamplesAzureConnection'
            backendAzureRmResourceGroupName: '$(StateResourceGroupName)'
            backendAzureRmStorageAccountName: '$(StateStorageAccount)'
            backendAzureRmContainerName: '$(StateContainerName)'
            backendAzureRmKey: '$(StateFileName)'
        - task: TerraformTaskV1@0
          displayName: 'Validate template'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: TerraformTaskV1@0
          displayName: 'Build plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
            commandOptions: '-out=tfplan -var deployment_prefix=$(DeploymentPrefix) -var location=$(Location) -var acrname=$(ACRName) -var sql-server-name=$(SQLServerName) -var sql_admin_password=$(SQLSAPassword) -var aks-name=$(AKSName) -var resourceGroupName=$(ResourceGroupName)'
            environmentServiceNameAzureRM: 'DockerExamplesAzureConnection'
        - task: TerraformTaskV1@0
          displayName: 'Apply infrastructure changes'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
            commandOptions: '-auto-approve tfplan'
            environmentServiceNameAzureRM: 'DockerExamplesAzureConnection'
- stage: ConfigureEnvironment
  jobs:
    - job: Installnginx
      steps:
      - task: HelmDeploy@0
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: 'DockerExamplesAzureConnection'
          azureResourceGroup: '$(ResourceGroup)'
          kubernetesCluster: $(AKSName)
          command: 'install'
          chartType: 'Name'
          chartName: 'nginx-ingress'
          arguments: '--set controller.replicaCount=2 --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux --set-string controller.config.proxy-body-size=10m'
pool:
  vmImage: ubuntu-latest