# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
    - getting-started/kubernetes/infrastructure

variables:
- group: docker-examples-variables

stages: 
- stage: RunDeployment
  jobs:
    - job: PlanAndApply
      steps:
        - task: AzureCLI@2
          displayName: Obtain credentials
          inputs:
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptType: 'pscore'
            scriptLocation: inlineScript
            inlineScript: |
              $subscriptionId=az account show --query id -o tsv
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
            addSpnToEnvironment: true
        - task: AzureCLI@2
          displayName: Terraform init
          inputs:
            scriptType: 'pscore'
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform init `
                -backend-config=storage_account_name="$env:STATESTORAGEACCOUNT" `
                -backend-config=container_name="$env:STATECONTAINERNAME" `
                -backend-config=key="$env:STATEFILENAME" `
                -backend-config=resource_group_name="$env:STATERESOURCEGROUPNAME"
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: AzureCLI@2
          displayName: Terraform validate
          inputs:
            scriptType: pscore
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform validate
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: AzureCLI@2
          displayName: Terraform plan
          inputs:
            scriptType: pscore
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform plan -out=tfplan `
                -var deployment_prefix="$env:DEPLOYMENTPREFIX" `
                -var location="$env:LOCATION" `
                -var acrname="$env:ACRNAME" `
                -var sql_server_name="$env:SQLSERVERNAME" `
                -var sql_admin_password="$env:SQLSAPasswordMapped" `
                -var aks_name="$env:AKSNAME" `
                -var resourceGroupName="$env:RESOURCEGROUPNAME" `
                -var elasticPoolName="$env:ELASTICPOOLNAME" `
                -var domainName="$env:DomainName"
            workingDirectory: 'getting-started/kubernetes/infrastructure'
          env:
            SQLSAPasswordMapped: $(SQLSAPASSWORD)
        - task: AzureCLI@2
          displayName: Terraform apply
          inputs:
            scriptType: pscore
            azureSubscription: 'DockerExamplesAzureConnection'
            scriptLocation: inlineScript
            inlineScript: |
              terraform apply -auto-approve tfplan
            addSpnToEnvironment: true
            workingDirectory: 'getting-started/kubernetes/infrastructure'
pool:
  vmImage: ubuntu-latest