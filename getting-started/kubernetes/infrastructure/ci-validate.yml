# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none
  # branches:
  #   exclude:
  #     - master
  # paths:
  #   include:
  #   - getting-started/kubernetes/infrastructure

variables:
- group: docker-examples-variables

stages: 
- stage: PrepeareInfrastructure
  jobs:
  - job: CreateStorageAccount
    steps:
    - task: AzureCLI@2
      displayName: "Create resource group"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $rg = az group list --query "[?name=='$env:STATERESOURCEGROUPNAME']" | ConvertFrom-Json
          if ($rg.Length -eq 0){
              Write-Output "Creating resource group $env:RESOURCEGROUP"
              az group create --name $env:STATERESOURCEGROUPNAME --location $env:LOCATION
          }
    - task: AzureCLI@2
      displayName: "Create storage account"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $storage = az storage account list --query "[?name=='$env:STATESTORAGEACCOUNT']" | ConvertFrom-Json
          if ($storage.Length -eq 0){
              Write-Output "Creating storage account $env:STATESTORAGEACCOUNT"
              az storage account create --name $env:STATESTORAGEACCOUNT --resource-group $env:STATERESOURCEGROUPNAME --location $env:LOCATION --sku 'Standard_LRS'
          }
    - task: AzureCLI@2
      displayName: "Create container"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $accountKey=$(az storage account keys list --resource-group $env:STATERESOURCEGROUPNAME --account-name $env:STATESTORAGEACCOUNT --query [0].value -o tsv)
          
           $container = az storage container list --account-name $env:STATESTORAGEACCOUNT --account-key $accountKey --query "[?name=='$env:STATECONTAINERNAME']" | ConvertFrom-Json
          if ( $container.Length -eq 0)
          {
              Write-Output "Creating container  $env:STATECONTAINERNAME"
              az storage container create --name $env:STATECONTAINERNAME --account-name $env:STATESTORAGEACCOUNT --account-key $accountKey
          }
- stage: RunIntegration
  jobs:
    - job: ValidateAndPlan
      steps:
        - task: TerraformTaskV1@0
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
            backendServiceArm: 'DockerExamplesAzureConnection'
            backendAzureRmResourceGroupName: '$(StateResourceGroupName)'
            backendAzureRmStorageAccountName: '$(StateStorageAccount)'
            backendAzureRmContainerName: '$(StateContainerName)'
            backendAzureRmKey: '$(StateFileName)'
        - task: TerraformTaskV1@0
          displayName: 'Validate template'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
        - task: TerraformTaskV1@0
          displayName: 'Build plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: 'getting-started/kubernetes/infrastructure'
            commandOptions: '-var deployment_prefix=$(DeploymentPrefix) -var location=$(Location) -var acrname=$(ACRName) -var sql-server-name=$(SQLServerName) -var sql_admin_password=$(SQLSAPassword) -var aks-name=$(AKSName) -var resourceGroupName=$(ResourceGroupName) -var elasticPoolName=$(ElasticPoolName)'
            environmentServiceNameAzureRM: 'DockerExamplesAzureConnection'
pool:
  vmImage: ubuntu-latest

