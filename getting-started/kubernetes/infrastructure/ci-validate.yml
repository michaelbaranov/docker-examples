# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude:
      - master
  paths:
    include:
    - getting-started/kubernetes/infrastructure

variables:
- group: Infrastructure

stages: 
- stage: PrepeareInfrastructure
  jobs:
  - job: CreateResourceGroup
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $rg = az group list --query "[?name=='$env:ResourceGroup']" | ConvertFrom-Json
          if ($rg.Length -eq 0){
              Write-Output "Creating resource group $env:ResourceGroup"
              az group create --name  $env:ResourceGroup  --location $env:Location
          }
  - job: CreateStorageAccount
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $storage = az storage account list --query "[?name=='$env:StorageAccount']" | ConvertFrom-Json
          if ($storage.Length -eq 0){
              Write-Output "Creating storage account $env:StorageAccount"
              az storage account create --name  $env:StorageAccount --resource-group $env:ResourceGroup  --location $env:Location --sku 'Standard_LRS'
          }
  - job: CreateContainer
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $accountKey=$(az storage account keys list --resource-group $env:ResourceGroup --account-name $env:StorageAccount --query [0].value -o tsv)
          
           $env:Container = az storage container list --account-name $env:StorageAccount --account-key $accountKey --query "[?name=='$env:Container']" | ConvertFrom-Json
          if ( $env:Container.Length -eq 0)
          {
              Write-Output "Creating container  $env:Container"
              az storage container create --name $env:Container --account-name $env:StorageAccount --account-key $accountKey
          }
- stage: PrepeareAgent
  jobs:
    - job: InstallTerraform
      steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.14.5'
      - script: terraform version
    - job: Init
      steps:
      - task: TerraformTaskV1@0
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: 'getting-started/kubernetes/infrastructure'
          backendAzureRmResourceGroupName: $(ResourceGroup)
          backendAzureRmStorageAccountName: $(StorageAccount)
          backendAzureRmContainerName: $(Container)
          backendAzureRmKey: $(StateFileName)

pool:
  vmImage: ubuntu-latest

