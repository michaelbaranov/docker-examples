trigger:
  - none

resources:
- repo: self

variables:
  - group: docker-examples-variables

jobs: 
  - job: Initialize
    steps:
    - task: AzureCLI@2
      displayName: "Get AKS Credentials"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: 'az aks get-credentials --name $env:AKSNAME --resource-group $env:RESOURCEGROUPNAME --admin'
    - task: DownloadSecureFile@1
      name: sitecoreLicense
      displayName: 'Download license file'
      inputs:
        secureFile: 'license.xml'
    - task: PowerShell@2
      displayName: "Install powershell modules"
      inputs:
        targetType: 'inline'
        script: |
          Import-Module PowerShellGet
          Write-Host "Adding Sitecore PowerShell Gallery..." -ForegroundColor Green 
          Register-PSRepository -Name SitecoreGallery -SourceLocation https://sitecore.myget.org/F/sc-powershell/api/v2 -InstallationPolicy Trusted
          $dockerToolsVersion = "10.1.4"
          Write-Host "Installing SitecoreDockerTools..." -ForegroundColor Green
          Install-Module SitecoreDockerTools -RequiredVersion $dockerToolsVersion -Scope CurrentUser -Repository SitecoreGallery
          Install-Module -Name SelfSignedCertificate -Repository PSGallery -Force
        pwsh: true
    - task: AzureCLI@2
      displayName: "Generate secrets"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $env:SitecoreAdminPasswordMapped | Set-Content  sitecore-adminpassword.txt -NoNewline
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-collection-shardmapmanager-database-password.txt  -NoNewline
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-core-database-password.txt  -NoNewline
          $env:ELASTICPOOLNAME | Set-Content sitecore-database-elastic-pool-name.txt  -NoNewline
          $env:SQLSAPasswordMapped | Set-Content sitecore-databasepassword.txt  -NoNewline
          "$($env:SQLSERVERNAME).database.windows.net" | Set-Content sitecore-databaseservername.txt  -NoNewline
          "sitecore" | Set-Content sitecore-databaseusername.txt  -NoNewline
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-exm-master-database-password.txt  -NoNewline
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-forms-database-password.txt  -NoNewline

          Get-SitecoreRandomString 64 -DisallowSpecial | Set-Content sitecore-identitysecret.txt  -NoNewline 
          $idCertPassword = Get-SitecoreRandomString 12 -DisallowSpecial
          New-SelfSignedCertificate -CommonName "localhost" -Passphrase $(ConvertTo-SecureString -Force -AsPlainText -String $idCertPassword) -OutCertPath certificate.pfx
          [System.Convert]::ToBase64String(Get-Content certificate.pfx) | Set-Content sitecore-identitycertificate.txt -NoNewline 
          $idCertPassword | Set-Content sitecore-identitycertificatepassword.txt -NoNewline 
          Write-Output "Secure file path $(sitecoreLicense.secureFilePath)"

          ConvertTo-CompressedBase64String -Path $(sitecoreLicense.secureFilePath) | Set-Content sitecore-license.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-marketing-automation-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-master-database-password.txt -NoNewline 
          Get-SitecoreRandomString 64 | Set-Content sitecore-media-request-protection-shared-secret.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-messaging-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-processing-engine-storage-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-processing-engine-tasks-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-processing-pools-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-processing-tasks-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-reference-data-database-password.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-reporting-database-password.txt -NoNewline 
          Get-SitecoreRandomString 64 -DisallowSpecial | Set-Content sitecore-reportingapikey.txt -NoNewline 
          "http://solr:8983/solr/sitecore_xdb;solrCloud=true" | Set-Content sitecore-solr-connection-string-xdb.txt -NoNewline 
          "http://solr:8983/solr;solrCloud=true" | Set-Content sitecore-solr-connection-string.txt -NoNewline 
          Get-SitecoreRandomString 128 | Set-Content sitecore-telerikencryptionkey.txt -NoNewline 
          Get-SitecoreRandomString 12  -DisallowSpecial -EnforceComplexity | Set-Content sitecore-web-database-password.txt -NoNewline 
        failOnStderr: true
        showWarnings: true
        pwsh: true
        workingDirectory: getting-started/kubernetes/application/xp1/overlays/secrets
      env:
        SQLSAPasswordMapped: $(SQLSAPassword)
        SitecoreAdminPasswordMapped: $(SitecoreAdminPassword)
    - task: AzureCLI@2
      displayName: "Deploy secrets"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: 'kustomize build secrets | kubectl apply -f -'
        workingDirectory: getting-started/kubernetes/application/xp1/overlays
    - task: AzureCLI@2
      displayName: "Deploy External services"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          kustomize build --load-restrictor LoadRestrictionsNone external | kubectl apply -f -
          do {
              $solrDeployment = kubectl get deployment solr -o json | ConvertFrom-Json
          } while ($solrDeployment.status.replicas -ne $solrDeployment.status.readyReplicas)
        workingDirectory: getting-started/kubernetes/application/xp1/overlays
    - task: AzureCLI@2
      displayName: "Deploy submit queue PVC"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: 'kubectl apply -f submit-queue.yaml'
        workingDirectory: getting-started/kubernetes/application/xp1/volumes/azurefile
    - task: AzureCLI@2
      displayName: "Run Init"
      inputs:
        azureSubscription: 'DockerExamplesAzureConnection'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: 'kustomize build --load-restrictor LoadRestrictionsNone init | kubectl apply -f -'
        workingDirectory: getting-started/kubernetes/application/xp1/overlays
pool:
  vmImage: ubuntu-latest